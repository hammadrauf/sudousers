---
- name: "Create User  and configure sudo block - {{ item.username }}"
  block:
    - name: "Create User {{ item.username }}."
      ansible.builtin.user:
        name: "{{ item.username }}"
        password: "{{ item.password }}"
        create_home: true
        groups: "users,mail,{{ su_sudo_group }}"
        shell: /bin/bash
        expires: -1
      when: item.is_super_user|bool

    - name: "Create User {{ item.username }}."
      ansible.builtin.user:
        name: "{{ item.username }}"
        password: "{{ item.password }}"
        create_home: true
        groups: "users,mail"
        shell: /bin/bash
        expires: -1
      when: not item.is_super_user|bool

    - name: "Create .ssh folder for {{ item.username }}"
      ansible.builtin.file:
        path: "/home/{{ item.username }}/.ssh"
        state: directory
        mode: "0700"

    - name: Check if running from Vagrant or other method, by checking User vagrant folder
      ansible.builtin.stat: path=/home/vagrant
      register: st

    - name: "Append user Public key to Authorized_keys for {{ item.username }}"
      ansible.builtin.shell: "cat /home/vagrant/.ssh/me.pub >> /home/{{ item.username }}/.ssh/authorized_keys"
      args:
        creates: "/home/{{ item.username }}/.ssh/authorized_keys"
      when: st.stat.exists

    - name: Get stats of root - authorized_keys
      ansible.builtin.stat:
        path: /root/.ssh/authorized_keys
      register: stroot

    - name: "Copy user Public key to Authorized_keys for {{ item.username }}"
      ansible.builtin.shell: "cat /root/.ssh/authorized_keys >> /home/{{ item.username }}/.ssh/authorized_keys"
      args:
        creates: "/home/{{ item.username }}/.ssh/authorized_keys"
      when: not st.stat.exists and stroot.stat.exists

    - name: "Set permissions for ~/.ssh/authorized_keys"
      ansible.builtin.file:
        path: "/home/{{ item.username }}/.ssh/authorized_keys"
        owner: "{{ item.username }}"
        group: "{{ item.username }}"
        mode: "0600"
      when: not st.stat.exists and stroot.stat.exists

    - name: "Add NOPASSWD Sudo into SUDOERS for {{ item.username }}"
      ansible.builtin.lineinfile:
        path: /etc/sudoers
        line: "{{ item.username }}        ALL=(ALL)       NOPASSWD: ALL"
        validate: /usr/sbin/visudo -cf %s
      when: item.is_super_user|bool

    - name: "Set Home directory ownership - {{ item.username }}"
      ansible.builtin.file:
        path: "/home/{{ item.username }}"
        owner: "{{ item.username }}"
        group: "{{ item.username }}"
        recurse: true
